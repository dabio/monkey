var _track = _track || [];
(function() {
  _track = {
    campaigns: <%= JSON(campaigns) %>,
    campaign_hit_hash: '<%= campaign_hit_hash %>',
    image: new Image(),
    track: function() {
      var campaign = this.getCampaignFromUrl();
      if (!campaign) return;
      // set cookie
      this.setCookie('_monkey', this.getHitHash(), campaign['cookie_lifetime'] * 60 * 60 * 24);
      this.image.src = this.getTrackingUrl(campaign);
    },
    getCampaignFromUrl: function() {
      for (var i = this.campaigns.length - 1; i >= 0; i--) {
        var campaign = this.campaigns[i]
          , p = [campaign['parameter_name'], campaign['parameter_value']];
        // ToDo: source=billiger also matches source=billigerde
        if (window.location.search.indexOf(p.join('=')) != -1) {
          return campaign;
        }
      };
      return null;
    },
    getHitHash: function() {
      // use the already set cookie or set a new cookie
      //return this.getCookie('_monkey') || this.campaign_hit_hash;
      return this.campaign_hit_hash;
    },
    getTrackingUrl: function(campaign) {
      var url = this.$('_monkey-tracker').getAttribute('src');
      url = this.getLocation(url).href.split('/');
      url.pop();
      url.push(campaign['campaign_hash'], this.getHitHash() + '.gif');
      return url.join('/');
    },
    getLocation: function (href) {
      var a = document.createElement('a');
      a.href = href;
      return a;
    },
    setCookie: function(name, value, expires) {
      var date
        , cookie = '';
      if (expires) {
        date = new Date();
        date.setTime(date.getTime() + (expires * 1000));
        cookie = '; expires=' + date.toGMTString();
      }
      document.cookie = name + '=' + escape(value) + cookie + ';path=/';
    },
    getCookie: function(name) {
      var name_equal = name + '='
        , cookies = document.cookie.split(';')
        , cookie;
      for (var i = cookies.length - 1; i >= 0; i--) {
        cookie = cookies[i];
        while (cookie.charAt(0) == ' ') {
          cookie = cookie.substring(1, cookie.length);
        }
        if (cookie.indexOf(name_equal) == 0) {
          return unescape(cookie.substring(name_equal.length, cookie.length));
        }
      }
      return null;
    },
    removeCookie: function(name) {
      document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
    },
    $: function (id) {
      if (document.getElementById)
        return document.getElementById(id);
      return null;
    },

    getOrderUrl: function() {
      var url = this.$('_monkey-tracker').getAttribute('src');
      url = this.getLocation(url).href.split('/');
      url.pop();url.pop();
      url.push('track-order', this.getHitHash() + '.html');
      return url.join('/');
    },
    getIframe: function(src) {
      var iframe = document.createElement('iframe');
      iframe.src = src;
      iframe.style.display = 'none';
      return iframe;
    },
    order: function() {
      var cookie = this.getCookie('_monkey')
        , query = []
        , i = 0
        , param, key, value
        , body = document.body || document.getElementsByTagName('body')[0];

      // first check for a cookie and for the _monkey array
      if (!cookie || !_monkey instanceof Array || _monkey.length < 4) return;

      // get every part of the array and escape it
      while (param = _monkey.shift()) {
        if (param instanceof Array && param.length == 2) {  // Arrays
          query.push('order['+param[0]+']=' + escape(param[1]));
        } else if (param instanceof Object) {               // Hashes
          for (key in param) {
            query.push('order['+i+']['+key+']=' + escape(encodeURIComponent(param[key])));
          }
          i++;
        }
      }

      body.insertBefore(
        this.getIframe(this.getOrderUrl() + '?' + query.join('&')),
        body.childNodes[body.childNodes.length-1]
      );
      // remove cookie
      this.removeCookie('_monkey');
    }
  };

  (typeof _monkey != 'undefined') ? _track.order() : _track.track();
}).call();
